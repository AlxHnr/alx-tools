#!/bin/bash

# This script builds and updates kernels. It will automatically migrate
# kernel configurations and reinstall modules.
set -e

# Various helper functions.
function message
{
  echo -e "build-kernel: $@"
}

function die
{
  message "error: $@" >&2
  exit 1
}

# Installs the kernel modules and re-emerges all packages, which have files
# in "/lib/modules". This function will pass all its arguments directly to
# emerge.
function install_modules
{
  make modules_install

  message "re-emerging packages with files in \"/lib/modules/\""
  equery b "/lib/modules" | grep -oE '^\S+' | sed -r 's,^,=,g' |
  xargs -d '\n' emerge "$@"
}

# Setup environment.
test -h /usr/src/linux || \
  die "/usr/src/linux does not exist or is not a symbolic link"

running_version=$(uname -r)
installed_version=$(readlink /usr/src/linux)
installed_version=${installed_version#linux-}
force_modules=no
show_diff=yes
update=no

# Process arguments.
for arg; do
  case "$arg" in
    --help)
      echo "Usage: build-kernel [OPTION]"
      echo "A small tool for building and updating kernels."
      echo
      echo -e "  -u, --update\t\t\tQuit, if there is no kernel config" \
        "to migrate."
      echo -e "  -n, --no-diff\t\t\tDon't prompt the user to confirm the" \
        "diff."
      echo -e "  -m, --modules\t\t\tForce reinstallation of modules."
      echo -e "      --help\t\t\tDisplay this help and exit."
      exit
      ;;
    -u|--update)
      update=yes
      ;;
    -n|--no-diff)
      show_diff=no
      ;;
    -m|--modules)
      force_modules=yes
      ;;
    *)
      die "invalid argument \"$arg\", try --help."
      ;;
  esac
done

cd "/usr/src/linux-$installed_version/"

if [[ "$update" == "yes" && -f .config ]];
then message "nothing to update" && exit
else
  test -w "./" || \
    die "no permissions to write to '/usr/src/linux-$installed_version/'"

  if [[ "$installed_version" != "$running_version" && ! -f .config ]]; then
    message "migrating from $running_version to $installed_version"
    cp -v "/usr/src/linux-$running_version/.config" .
    make silentoldconfig
  else
    message "rebuilding current kernel ($installed_version)"
  fi
fi

if [[ -f ".config.old" && "$show_diff" == "yes" ]]; then
  diff_output=$(diff .config.old .config -I \
    '^# Linux/x86 \([0-9]\+\.\)\{2\}[0-9]\+\([0-9A-Za-z\.\-]*\)\? Kernel Configuration$' || \
    true)

  if [[ -n "$diff_output" ]]; then
    echo
    echo "# Diff between \".config\" and \".config.old\":"
    echo "------------------------------------------------------------"
    echo "$diff_output"
    echo "------------------------------------------------------------"
    echo

    while true; do
      echo -n "proceed? (y/n) "
      read line
      case ${line,,} in
        y|yes) break;;
        n|no)  exit 1;;
        *)
          test -n "$line" &&
            message "invalid input \"$line\"." &&
            message "try \"y\", \"yes\", \"n\" or \"no\" instead." >&2 &&
            echo
          ;;
      esac
    done
  fi
fi

# Build and install kernel.
make "-j$(grep -c '^processor' /proc/cpuinfo)"
mkdir -p /boot
mount -v /dev/sda1 /boot
mkdir -p /boot/efi/boot
cp -v arch/x86/boot/bzImage /boot/efi/boot/bootx64.efi
umount -v /boot

# Ensure that modules are installed properly.
if [[ ! -e "/lib/modules/$installed_version" ]]; then
  install_modules -v1O
elif [[ "$force_modules" == "yes" ]]; then
  rm -rf "/lib/modules/$installed_version"
  install_modules -qk1O
fi
