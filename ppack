#!/bin/bash -e

function die
{
  echo "ppack: error: $@" >&2
  exit 1
}

# Process arguments.
dest=$(pwd)
directories=()
remove_archives=no
force_overwrite=no
suffix=xz
for arg; do
  case "$arg" in
    --help)
      echo "Usage: ppack [PATHS]..."
      echo "A tool for creating project snapshots."
      echo
      echo "This script will pack the given directories and append a"
      echo "timestamp to the archive name. The timestamp will be either"
      echo "the modification time of the newest file, or of the latest"
      echo "commit."
      echo
      echo "All arguments will be interpreted as absolute or relative"
      echo "paths. The only exception are the following arguments:"
      echo -e "      --dest=PATH\t\tThe directory in which the archive" \
        "should be"
      echo -e "\t\t\t\tcreated. Defaults to the current directory."
      echo -e "      --suffix=SUFFIX\t\tArchive extension to pass to" \
        "tar. Default: \"xz\"."
      echo -e "  -r, --remove-archives\t\tRemove previously existing" \
        "archives."
      echo -e "  -f, --force\t\t\tForce overwriting of the current" \
        "archive."
      echo -e "      --help\t\t\tDisplay this help and exit."
      exit
      ;;
    --dest=*)
      new_dest=${arg#--dest=}
      dest=$(readlink -f "$new_dest" || true)
      test ! -d "$dest" && die "invalid path: \"$new_dest\""
      ;;
    --suffix=*)
      suffix=${arg#--suffix=}
      ;;
    -r|--remove-archives)
      remove_archives=yes
      ;;
    -f|--force)
      force_overwrite=yes
      ;;
    *)
      test -d "$arg" || die "invalid directory: \"$arg\""
      directories+=("$arg")
      ;;
  esac
done

test ${#directories[@]} == 0 && die "no directories specified"

# Finds the most recent file in the given directory and prints its
# modification date. This function will ignore VCS directories.
#
# $1 A valid directory path.
function find_latest_timestamp
{
  timestamp=$(find "$1" -type f ! -path "*/.git/*" \
    ! -path "*/.svn/*" ! -path "*/.bzr/*" ! -path "*/.cvs/*" \
    -exec stat -c "%Y" {} ';' | sort -nr | head -n1)

  # If no timestamp could be found, use the timestamp of the directory
  # itself.
  test -n "$timestamp" || timestamp=$(stat -c "%Y" "$1")
  date -d "@$timestamp" +"%d-%m-%y-%H:%M:%S"
}

function packdir
(
  project_path=$(readlink -f "$1")
  project_name=$(basename "$project_path")
  cd "$(dirname "$project_path")"
  unset extra_info
  exclude=()

  if [[ -d "$project_name/.git" ]]; then
    date_string=$(git -C "$project_name" show -s --format='%ci' HEAD 2>/dev/null |
    sed -E 's,^..([0-9]{2})-([0-9]{2})-([0-9]{2}) (\S+).*$,\3-\2-\1-\4,g')
    test -n "$date_string" &&
      extra_info="$(git -C "$project_name" log | grep '^commit' | wc -l)" &&
      extra_info=", ${extra_info} commits"
    test -n "$date_string" ||
      date_string=$(find_latest_timestamp "$project_name")
  else
    date_string=$(find_latest_timestamp "$project_name")
  fi

  archive_path="${dest}/${project_name}-${date_string}.tar.${suffix}"
  test -e "$archive_path" && [[ "$force_overwrite" == "no" ]] &&
    continue

  if test "$remove_archives" = "yes"; then
    rm -v "$dest/$project_name"-??-??-??-??:??:??.tar.* 2>/dev/null || true
  fi

  test -d "$project_name/.git" &&
    find "$project_name" -name .gitignore |
    while read gitignore_path; do
      ignore_root=$(dirname "$gitignore_path")
      LANG=en git -C "$ignore_root" clean -ndX |
       sed 's/^Would remove //' | sed 's/\/*$//' |
       while read line; do echo "--exclude=$ignore_root/$line"; done
    done |
    xargs -d '\n' tar caf "$archive_path" "$project_name"

  extra_info="$(du -h "$archive_path" | grep -oE '^\S+')${extra_info}"
  echo "packed: $project_name ($extra_info)"
)

for dir in "${directories[@]}"; do packdir "$dir"; done
