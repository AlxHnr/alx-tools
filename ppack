#!/bin/bash

set -e

function die
{
  echo "ppack: error: $@" >&2
  exit 1
}

# Process arguments.
dest=$(pwd)
directories=()
remove_archives=no
for arg; do
  case "$arg" in
    --help)
      echo "Usage: packdir [PATHS]..."
      echo "A tool for creating project snapshots."
      echo
      echo "This script will pack the given directories and append a"
      echo "timestamp to the archive name. The timestamp will be either"
      echo "the modification time of the newest file, or of the latest"
      echo "commit."
      echo
      echo "All arguments will be interpreted as absolute or relative"
      echo "paths. The only exception are the following arguments:"
      echo -e "      --dest=PATH\t\tThe directory in which the archive" \
        "should be"
      echo -e "\t\t\t\tcreated. Defaults to the current directory."
      echo -e "  -r, --remove-archives\t\tRemove previously existing" \
        "archives for each"
      echo -e "\t\t\t\tdirectory."
      echo -e "      --help\t\t\tDisplay this help and exit."
      exit
      ;;
    --dest=*)
      new_dest=${arg#--dest=}
      dest=$(readlink -f "$new_dest" || true)
      test ! -d "$dest" && die "invalid path: \"$new_dest\""
      ;;
    -r|--remove-archives)
      remove_archives=yes
      ;;
    *)
      test -d "$arg" || die "invalid directory: \"$arg\""
      directories+=("$arg")
      ;;
  esac
done

test ${#directories[@]} == 0 && die "no directories specified"

# Finds the most recent file in the given directory and prints its
# modification date. This function will ignore VCS directories.
#
# $1 A valid directory path.
function find_latest_timestamp
{
  timestamp=$(find "$1" -type f ! -path "*/.git/*" \
    ! -path "*/.svn/*" ! -path "*/.bzr/*" ! -path "*/.cvs/*" \
    -exec stat -c "%Y" {} ';' | sort -nr | head -n1)

  # If no timestamp could be found, use the timestamp of the directory
  # itself.
  test -n "$timestamp" || timestamp=$(stat -c "%Y" "$1")
  date -d "@$timestamp" +"%d-%m-%y-%H:%M:%S"
}

for dir in "${directories[@]}"; do
  project_path=$(readlink -f "$dir")
  project_name=$(basename "$project_path")
  cd "$(dirname "$project_path")"
  exclude=()

  if [[ -d "$project_name/.git" ]]; then
    date_string=$(git -C "$project_name" show -s --format='%ci' HEAD 2>/dev/null |
    sed -E 's,^..([0-9]{2})-([0-9]{2})-([0-9]{2}) (\S+).*$,\3-\2-\1-\4,g')
    test -n "$date_string" ||
      date_string=$(find_latest_timestamp "$project_name")

    # Extract and expand paths in .gitignore.
    test -f "$project_name/.gitignore" &&
      for file in $(sed -r "s,^(.*)$,$project_name/\1,g" "$project_name/.gitignore");
      do
        exclude+=("$(sed -r 's,^(.*[^/])/*$,--exclude=\1,g' <<< "$file")");
      done
  else
    date_string=$(find_latest_timestamp "$project_name")
  fi

  archive_path="${dest}/${project_name}-${date_string}.tar.xz"
  test -e "$archive_path" && continue

  [[ "$remove_archives" == "yes" ]] &&
    { rm -v "$dest/$project_name"-??-??-??-??:??:??.tar.xz 2>/dev/null ||
      true; }

  tar -c --xz -f "$archive_path" "$project_name" "${exclude[@]}" &&
    echo "packed: $project_name"
done
