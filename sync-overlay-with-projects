#!/bin/bash

set -e

function die
{
  echo "error: $@" >&2
  exit 1
}

# Process arguments.
project_search_path=".."
test $# -gt 1 && die "too many arguments"
if [[ $# -eq 1 ]]; then
  case "$1" in
    --help)
      echo "Usage: sync-overlay-with-projects [PROJECT-SEARCH-PATH]"
      echo "A tool for rotating ebuilds in overlays."
      echo
      echo "This script updates ebuild names to match the latest git"
      echo "tags of your projects. It also updates manifests and tries"
      echo "to commit and push the changes. It must be run from the root"
      echo "directory of the overlay."
      echo
      echo "This script takes one optional argument, containing the"
      echo "directory which will be searched for projects. If not"
      echo "specified, it defaults to \"..\"."
      exit
      ;;
    *)
      test -d "$1" || die "not a directory: \"$1\""
      project_search_path="$1"
      ;;
  esac
fi

# Associates package names with the relative path to their ebuild.
declare -A paths

# Associates package names with the ebuilds version suffix, e.g. "0.1.4".
declare -A versions

# Populate "paths" and "versions".
while read path; do
  package=${path#./*/}
  package=${package%%/*}
  paths["$package"]=$path

  ebuild_version=$(sed -r "s,.*\/$package-(.*)\.ebuild$,\1,g" <<< "$path")
  versions["$package"]="$ebuild_version"
done < <(find . -type f -regex '^.*\.ebuild$' | grep -v '999\.ebuild$')

# The temporary directory to which the archive specified in the ebuild will
# be downloaded to. This is required for generating the manifest without
# having write access to $DISTDIR.
tmp_dir=$(mktemp -d)

# Will be set to true, if at least one ebuild was updated.
unset ebuilds_updated

# Sync package ebuilds with projects having the same name.
for package in "${!paths[@]}"; do
  test -d "$project_search_path/$package" || continue

  latest_tag=$(git -C "$project_search_path/$package" tag | sort | \
    tail -n1 | sed -r 's,^v?(.*)$,\1,g')

  test -z "$latest_tag" && continue
  [[ "${versions["$package"]}" == "$latest_tag" ]] && continue

  old_ebuild_path=${paths["$package"]}
  ebuild_directory=$(dirname "$old_ebuild_path")
  new_ebuild_path="$ebuild_directory/${package}-${latest_tag}.ebuild"

  mv "$old_ebuild_path" "$new_ebuild_path"
  DISTDIR="$tmp_dir" ebuild "$new_ebuild_path" manifest --force

  # Compare the package downloaded trough the ebuild to the source code in
  # the projects directory.
  (cd "$tmp_dir" && tar xf "$package-$latest_tag.tar.gz")

  diff_command=(diff -rq)
  test -f "$project_search_path/$package/.gitignore" && \
    diff_command+=("-X" "$project_search_path/$package/.gitignore")
  "${diff_command[@]}" -x ".git" "$project_search_path/$package" \
    "$tmp_dir/$package-$latest_tag" ||
    {
      # Cleanup git working tree.
      mv "$new_ebuild_path" "$old_ebuild_path";
      git checkout "$ebuild_directory/Manifest";
      die "distributed archive contains modified source code";
    }


  # Commit the changes.
  git reset
  git rm --ignore-unmatch "$old_ebuild_path"
  git add "$new_ebuild_path" "$ebuild_directory/Manifest"
  git commit -m "Updated $package to $latest_tag"
  ebuilds_updated=true
done

rm -rf "$tmp_dir"

[[ "$ebuilds_updated" == "true" ]] && git push
