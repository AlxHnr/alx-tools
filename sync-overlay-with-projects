#!/bin/bash

# This script updates ebuild names to match the latest git tags of your
# projects. It also updates manifests and tries to commit and push the
# changes. It must be run from the root directory of the overlay.
set -e

function die
{
  echo "error: $@" >&2
  exit 1
}

# Associates package names with the relative path to their ebuild.
declare -A paths

# Associates package names with the ebuilds version suffix, e.g. "0.1.4".
declare -A versions

# Populate "paths" and "versions".
while read path; do
  package=${path#./*/}
  package=${package%%/*}
  paths["$package"]=$path

  ebuild_version=$(sed -r "s,.*\/$package-(.*)\.ebuild$,\1,g" <<< "$path")
  versions["$package"]="$ebuild_version"
done < <(find . -type f -regex '^.*\.ebuild$' | grep -v '999\.ebuild$')

# The temporary directory to which the archive specified in the ebuild will
# be downloaded to. This is required for generating the manifest without
# having write access to $DISTDIR.
tmp_dir=$(mktemp -d)

# Will be set to true, if at least one ebuild was updated.
unset ebuilds_updated

# Sync package ebuilds with projects having the same name.
for package in "${!paths[@]}"; do
  test -d "../$package" || continue

  latest_tag=$(git -C "../$package" tag | sort | tail -n1 | \
    sed -r 's,^v?(.*)$,\1,g')

  test -z "$latest_tag" && continue
  [[ "${versions["$package"]}" == "$latest_tag" ]] && continue

  old_ebuild_path=${paths["$package"]}
  ebuild_directory=$(dirname "$old_ebuild_path")
  new_ebuild_path="$ebuild_directory/${package}-${latest_tag}.ebuild"

  mv "$old_ebuild_path" "$new_ebuild_path"
  DISTDIR="$tmp_dir" ebuild "$new_ebuild_path" manifest --force

  # Compare the package downloaded trough the ebuild to the source code in
  # the projects directory.
  (cd "$tmp_dir" && tar xf "$package-$latest_tag.tar.gz")

  diff_command="diff -rq"
  test -f "../$package/.gitignore" && \
    diff_command+=" -X ../$package/.gitignore"
  $diff_command -x ".git" "../$package" "$tmp_dir/$package-$latest_tag" \
    || die "distributed archive contains modified source code"

  # Commit the changes.
  git reset
  git rm --ignore-unmatch "$old_ebuild_path"
  git add "$new_ebuild_path" "$ebuild_directory/Manifest"
  git commit -m "Updated $package to $latest_tag"
  ebuilds_updated=true
done

rm -rf "$tmp_dir"

[[ "$ebuilds_updated" == "true" ]] && git push
